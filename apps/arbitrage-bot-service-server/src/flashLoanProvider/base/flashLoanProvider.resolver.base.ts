/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FlashLoanProvider } from "./FlashLoanProvider";
import { FlashLoanProviderCountArgs } from "./FlashLoanProviderCountArgs";
import { FlashLoanProviderFindManyArgs } from "./FlashLoanProviderFindManyArgs";
import { FlashLoanProviderFindUniqueArgs } from "./FlashLoanProviderFindUniqueArgs";
import { CreateFlashLoanProviderArgs } from "./CreateFlashLoanProviderArgs";
import { UpdateFlashLoanProviderArgs } from "./UpdateFlashLoanProviderArgs";
import { DeleteFlashLoanProviderArgs } from "./DeleteFlashLoanProviderArgs";
import { FlashLoanProviderService } from "../flashLoanProvider.service";
@graphql.Resolver(() => FlashLoanProvider)
export class FlashLoanProviderResolverBase {
  constructor(protected readonly service: FlashLoanProviderService) {}

  async _flashLoanProvidersMeta(
    @graphql.Args() args: FlashLoanProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FlashLoanProvider])
  async flashLoanProviders(
    @graphql.Args() args: FlashLoanProviderFindManyArgs
  ): Promise<FlashLoanProvider[]> {
    return this.service.flashLoanProviders(args);
  }

  @graphql.Query(() => FlashLoanProvider, { nullable: true })
  async flashLoanProvider(
    @graphql.Args() args: FlashLoanProviderFindUniqueArgs
  ): Promise<FlashLoanProvider | null> {
    const result = await this.service.flashLoanProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FlashLoanProvider)
  async createFlashLoanProvider(
    @graphql.Args() args: CreateFlashLoanProviderArgs
  ): Promise<FlashLoanProvider> {
    return await this.service.createFlashLoanProvider({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FlashLoanProvider)
  async updateFlashLoanProvider(
    @graphql.Args() args: UpdateFlashLoanProviderArgs
  ): Promise<FlashLoanProvider | null> {
    try {
      return await this.service.updateFlashLoanProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FlashLoanProvider)
  async deleteFlashLoanProvider(
    @graphql.Args() args: DeleteFlashLoanProviderArgs
  ): Promise<FlashLoanProvider | null> {
    try {
      return await this.service.deleteFlashLoanProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
